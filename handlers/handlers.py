from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.types import FSInputFile
import re
import os

router = Router()

from service.tiktok import download_tiktok_video
from keyboards.keyboard import start_keyboard, start_inl_keyboard

router = Router()


@router.message(F.text == "–ú–æ–π ID")
async def my_id_handlers(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–π ID"."""
    await message.answer(
        f"<b>–í–∞—à Telegram ID</b>:\n{message.from_user.id}",
        parse_mode="HTML")


@router.message(F.text == "–ú–æ–∏ –¥—Ä—É–∑—å—è")
async def my_friends_handlers(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–π ID"."""
    await message.answer(
        f"<b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>",
        parse_mode="HTML")
    
    
@router.message(F.text == "–ó–∞—è–≤–∫–∏")
async def requests_handlers(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–π ID"."""
    await message.answer(
        f"<b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>",
        parse_mode="HTML")


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞")
async def add_friends_handlers(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞"."""
    await message.answer(
        f"<b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>",
        parse_mode="HTML")


@router.callback_query(F.data == "help_add_friends")
async def my_id(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–π ID"."""
    await callback.answer("")
    await callback.message.edit_text(
        "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ –¥—Ä—É–∑—å—è–º, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ <b>–ú–æ–π ID</b> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID –¥—Ä—É–≥—É.\n"
        "2. –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –≤–∞—à ID —á–µ—Ä–µ–∑ –º–µ–Ω—é <b>–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞</b>.\n"
        "3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —É–≤–∏–¥–∏—Ç–µ –∑–∞—è–≤–∫—É –≤ –º–µ–Ω—é <b>–ó–∞—è–≤–∫–∏</b> –∏ —Å–º–æ–∂–µ—Ç–µ –µ—ë –ø—Ä–∏–Ω—è—Ç—å.\n\n"
        "–ò–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç: –ø—É—Å—Ç—å –¥—Ä—É–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å–≤–æ–π ID, –∞ –≤—ã –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ <b>–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞</b> –∏ –ø—Ä–∏–º–∏—Ç–µ –∑–∞—è–≤–∫—É –≤ <b>–ó–∞—è–≤–∫–∏</b>.\n\n"
        "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º –≤–∏–¥–µ–æ!",
        parse_mode="HTML")


@router.message(CommandStart())
async def start_handlers(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer(
        "<b>üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Multi Tool.</b>\n\n"
        "–Ø –º–æ–≥—É:\n"
        "<b>‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –∫–ª–∏–ø—ã –∏–∑ TikTok</b>\n"
        "<b>‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ YouTube</b>\n"
        "<b>‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ Spotify</b>\n\n"
        "<i>–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É ‚Äî –∏ —è –≤—Å—ë –∑–∞–≥—Ä—É–∂—É!</i>\n\n",
        parse_mode="HTML", reply_markup=start_keyboard)
    await message.answer("–¢–∞–∫–∂–µ —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º.\n",
                         reply_markup=start_inl_keyboard)





# –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞: –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –Ω—É–∂–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
TIKTOK_URL_REGEX = re.compile(r"^https://(vm\.)?tiktok\.com")

@router.message(F.text.regexp(TIKTOK_URL_REGEX))
async def handle_tiktok_link(message: Message):
    url = message.text.strip()
    await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É –∏ —Å–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")

    filepath = None
    try:
        filepath = await download_tiktok_video(url)

        if filepath is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ—Ä–∞–±–æ—á–∞—è.")
            return

        video_file = FSInputFile(filepath)
        await message.answer_video(video=video_file)

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    finally:
        if filepath and os.path.exists(filepath):
            os.remove(filepath)